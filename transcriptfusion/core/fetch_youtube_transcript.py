import sys
import os
import re
import json
from youtube_transcript_api import YouTubeTranscriptApi
from youtube_transcript_api.formatters import JSONFormatter


def extract_video_id(url_or_id: str) -> str:
    match = re.search(r"(?:v=|youtu\.be/|/v/|/embed/)([^#&?]{11})", url_or_id)
    return match.group(1) if match else url_or_id  # fallback: assume it's already a video ID


def fetch_transcript(video_id: str, output_dir: str, mode: str = "prompt"):
    try:
        ytt_api = YouTubeTranscriptApi()
        transcript_list = ytt_api.list(video_id)

        transcript = None
        if mode == "human":
            transcript = transcript_list.find_manually_created_transcript(['en'])
        elif mode == "auto":
            transcript = transcript_list.find_generated_transcript(['en'])
        else:
            print("Available transcripts:")
            for t in transcript_list:
                kind = "Human" if not t.is_generated else "Auto"
                print(f"- {t.language} ({kind})")

            inp = input("Fetch human or autogenerated transcript? [h/a]: ").strip().lower()
            if inp == "h":
                transcript = transcript_list.find_manually_created_transcript(['en'])
            elif inp == "a":
                transcript = transcript_list.find_generated_transcript(['en'])
            else:
                print("❌ Invalid option selected.")
                return

        if not transcript:
            print("❌ No transcript found for the requested mode.")
            return

        data = transcript.fetch()
        if not data:
            print("❌ Transcript fetch returned empty data.")
            return

        os.makedirs(output_dir, exist_ok=True)
        suffix = "official" if not transcript.is_generated else "generated"
        out_path = os.path.join(output_dir, f"{video_id}_{suffix}.json")

        with open(out_path, "w", encoding="utf-8") as f:
            json_str = JSONFormatter().format_transcript(data, indent=2)
            f.write(json_str)

        print(f"✅ Transcript saved to {out_path}")

    except Exception as e:
        print(f"❌ Error fetching transcript: {e}")


if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("Usage: python fetch_youtube_transcript.py <YouTube_URL_or_ID> [-h|-a]")
        sys.exit(1)

    video_input = sys.argv[1]
    mode = "prompt"
    if len(sys.argv) >= 3:
        if sys.argv[2] == "-h":
            mode = "human"
        elif sys.argv[2] == "-a":
            mode = "auto"

    video_id = extract_video_id(video_input)
    project_root = os.getcwd()
    output_dir = os.path.join(project_root, "data", "transcripts")

    fetch_transcript(video_id, output_dir, mode)
